// Code generated by MockGen. DO NOT EDIT.
// Source: internal/notifications/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2023_1_PracticalDev/internal/models"
	gomock "github.com/golang/mock/gomock"
	websocket "github.com/gorilla/websocket"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockService) Create(userID int, notificationType string, data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userID, notificationType, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockServiceMockRecorder) Create(userID, notificationType, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), userID, notificationType, data)
}

// HandleConnection mocks base method.
func (m *MockService) HandleConnection(userID int, conn *websocket.Conn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleConnection", userID, conn)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleConnection indicates an expected call of HandleConnection.
func (mr *MockServiceMockRecorder) HandleConnection(userID, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleConnection", reflect.TypeOf((*MockService)(nil).HandleConnection), userID, conn)
}

// ListUnreadByUser mocks base method.
func (m *MockService) ListUnreadByUser(userID int) ([]models.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUnreadByUser", userID)
	ret0, _ := ret[0].([]models.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUnreadByUser indicates an expected call of ListUnreadByUser.
func (mr *MockServiceMockRecorder) ListUnreadByUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUnreadByUser", reflect.TypeOf((*MockService)(nil).ListUnreadByUser), userID)
}
