// Code generated by MockGen. DO NOT EDIT.
// Source: internal/likes/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2023_1_PracticalDev/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Like mocks base method.
func (m *MockService) Like(pinId, authorId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Like", pinId, authorId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Like indicates an expected call of Like.
func (mr *MockServiceMockRecorder) Like(pinId, authorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Like", reflect.TypeOf((*MockService)(nil).Like), pinId, authorId)
}

// ListByAuthor mocks base method.
func (m *MockService) ListByAuthor(authorId int) ([]models.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByAuthor", authorId)
	ret0, _ := ret[0].([]models.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByAuthor indicates an expected call of ListByAuthor.
func (mr *MockServiceMockRecorder) ListByAuthor(authorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByAuthor", reflect.TypeOf((*MockService)(nil).ListByAuthor), authorId)
}

// ListByPin mocks base method.
func (m *MockService) ListByPin(pinId int) ([]models.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByPin", pinId)
	ret0, _ := ret[0].([]models.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByPin indicates an expected call of ListByPin.
func (mr *MockServiceMockRecorder) ListByPin(pinId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByPin", reflect.TypeOf((*MockService)(nil).ListByPin), pinId)
}

// Unlike mocks base method.
func (m *MockService) Unlike(pinId, authorId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlike", pinId, authorId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlike indicates an expected call of Unlike.
func (mr *MockServiceMockRecorder) Unlike(pinId, authorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlike", reflect.TypeOf((*MockService)(nil).Unlike), pinId, authorId)
}
