// Code generated by MockGen. DO NOT EDIT.
// Source: internal/followings/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	followings "github.com/go-park-mail-ru/2023_1_PracticalDev/internal/followings"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Follow mocks base method.
func (m *MockService) Follow(followerId, followeeId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Follow", followerId, followeeId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Follow indicates an expected call of Follow.
func (mr *MockServiceMockRecorder) Follow(followerId, followeeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Follow", reflect.TypeOf((*MockService)(nil).Follow), followerId, followeeId)
}

// GetFollowees mocks base method.
func (m *MockService) GetFollowees(userId int) ([]followings.Followee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowees", userId)
	ret0, _ := ret[0].([]followings.Followee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowees indicates an expected call of GetFollowees.
func (mr *MockServiceMockRecorder) GetFollowees(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowees", reflect.TypeOf((*MockService)(nil).GetFollowees), userId)
}

// GetFollowers mocks base method.
func (m *MockService) GetFollowers(userId int) ([]followings.Follower, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowers", userId)
	ret0, _ := ret[0].([]followings.Follower)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowers indicates an expected call of GetFollowers.
func (mr *MockServiceMockRecorder) GetFollowers(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowers", reflect.TypeOf((*MockService)(nil).GetFollowers), userId)
}

// Unfollow mocks base method.
func (m *MockService) Unfollow(followerId, followeeId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unfollow", followerId, followeeId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unfollow indicates an expected call of Unfollow.
func (mr *MockServiceMockRecorder) Unfollow(followerId, followeeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unfollow", reflect.TypeOf((*MockService)(nil).Unfollow), followerId, followeeId)
}
