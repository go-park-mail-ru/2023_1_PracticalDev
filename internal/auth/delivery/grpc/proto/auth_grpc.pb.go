// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: auth.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Authenficator_Authenticate_FullMethodName  = "/auth.Authenficator/Authenticate"
	Authenficator_Register_FullMethodName      = "/auth.Authenficator/Register"
	Authenficator_SetSession_FullMethodName    = "/auth.Authenficator/SetSession"
	Authenficator_CheckAuth_FullMethodName     = "/auth.Authenficator/CheckAuth"
	Authenficator_DeleteSession_FullMethodName = "/auth.Authenficator/DeleteSession"
)

// AuthenficatorClient is the client API for Authenficator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenficatorClient interface {
	Authenticate(ctx context.Context, in *LoginParams, opts ...grpc.CallOption) (*User, error)
	Register(ctx context.Context, in *User, opts ...grpc.CallOption) (*LoginParams, error)
	SetSession(ctx context.Context, in *SessionSetParams, opts ...grpc.CallOption) (*Nothing, error)
	CheckAuth(ctx context.Context, in *SessionCheckParams, opts ...grpc.CallOption) (*User, error)
	DeleteSession(ctx context.Context, in *SessionCheckParams, opts ...grpc.CallOption) (*Nothing, error)
}

type authenficatorClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenficatorClient(cc grpc.ClientConnInterface) AuthenficatorClient {
	return &authenficatorClient{cc}
}

func (c *authenficatorClient) Authenticate(ctx context.Context, in *LoginParams, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, Authenficator_Authenticate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenficatorClient) Register(ctx context.Context, in *User, opts ...grpc.CallOption) (*LoginParams, error) {
	out := new(LoginParams)
	err := c.cc.Invoke(ctx, Authenficator_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenficatorClient) SetSession(ctx context.Context, in *SessionSetParams, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, Authenficator_SetSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenficatorClient) CheckAuth(ctx context.Context, in *SessionCheckParams, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, Authenficator_CheckAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenficatorClient) DeleteSession(ctx context.Context, in *SessionCheckParams, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, Authenficator_DeleteSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenficatorServer is the server API for Authenficator service.
// All implementations must embed UnimplementedAuthenficatorServer
// for forward compatibility
type AuthenficatorServer interface {
	Authenticate(context.Context, *LoginParams) (*User, error)
	Register(context.Context, *User) (*LoginParams, error)
	SetSession(context.Context, *SessionSetParams) (*Nothing, error)
	CheckAuth(context.Context, *SessionCheckParams) (*User, error)
	DeleteSession(context.Context, *SessionCheckParams) (*Nothing, error)
	mustEmbedUnimplementedAuthenficatorServer()
}

// UnimplementedAuthenficatorServer must be embedded to have forward compatible implementations.
type UnimplementedAuthenficatorServer struct {
}

func (UnimplementedAuthenficatorServer) Authenticate(context.Context, *LoginParams) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedAuthenficatorServer) Register(context.Context, *User) (*LoginParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthenficatorServer) SetSession(context.Context, *SessionSetParams) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSession not implemented")
}
func (UnimplementedAuthenficatorServer) CheckAuth(context.Context, *SessionCheckParams) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAuth not implemented")
}
func (UnimplementedAuthenficatorServer) DeleteSession(context.Context, *SessionCheckParams) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (UnimplementedAuthenficatorServer) mustEmbedUnimplementedAuthenficatorServer() {}

// UnsafeAuthenficatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenficatorServer will
// result in compilation errors.
type UnsafeAuthenficatorServer interface {
	mustEmbedUnimplementedAuthenficatorServer()
}

func RegisterAuthenficatorServer(s grpc.ServiceRegistrar, srv AuthenficatorServer) {
	s.RegisterService(&Authenficator_ServiceDesc, srv)
}

func _Authenficator_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenficatorServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authenficator_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenficatorServer).Authenticate(ctx, req.(*LoginParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authenficator_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenficatorServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authenficator_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenficatorServer).Register(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authenficator_SetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionSetParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenficatorServer).SetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authenficator_SetSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenficatorServer).SetSession(ctx, req.(*SessionSetParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authenficator_CheckAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionCheckParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenficatorServer).CheckAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authenficator_CheckAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenficatorServer).CheckAuth(ctx, req.(*SessionCheckParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authenficator_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionCheckParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenficatorServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authenficator_DeleteSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenficatorServer).DeleteSession(ctx, req.(*SessionCheckParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Authenficator_ServiceDesc is the grpc.ServiceDesc for Authenficator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authenficator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Authenficator",
	HandlerType: (*AuthenficatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _Authenficator_Authenticate_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Authenficator_Register_Handler,
		},
		{
			MethodName: "SetSession",
			Handler:    _Authenficator_SetSession_Handler,
		},
		{
			MethodName: "CheckAuth",
			Handler:    _Authenficator_CheckAuth_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _Authenficator_DeleteSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
