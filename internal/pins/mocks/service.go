// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pins/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2023_1_PracticalDev/internal/models"
	pins "github.com/go-park-mail-ru/2023_1_PracticalDev/internal/pins"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddPinToBoard mocks base method.
func (m *MockService) AddToBoard(boardId, pinId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToBoard", boardId, pinId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPinToBoard indicates an expected call of AddPinToBoard.
func (mr *MockServiceMockRecorder) AddPinToBoard(boardId, pinId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToBoard", reflect.TypeOf((*MockService)(nil).AddToBoard), boardId, pinId)
}

// CheckReadAccess mocks base method.
func (m *MockService) CheckReadAccess(userId, pinId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckReadAccess", userId, pinId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckReadAccess indicates an expected call of CheckReadAccess.
func (mr *MockServiceMockRecorder) CheckReadAccess(userId, pinId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckReadAccess", reflect.TypeOf((*MockService)(nil).CheckReadAccess), userId, pinId)
}

// CheckWriteAccess mocks base method.
func (m *MockService) CheckWriteAccess(userId, pinId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckWriteAccess", userId, pinId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckWriteAccess indicates an expected call of CheckWriteAccess.
func (mr *MockServiceMockRecorder) CheckWriteAccess(userId, pinId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckWriteAccess", reflect.TypeOf((*MockService)(nil).CheckWriteAccess), userId, pinId)
}

// CreatePin mocks base method.
func (m *MockService) Create(params *pins.CreateParams) (models.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", params)
	ret0, _ := ret[0].(models.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePin indicates an expected call of CreatePin.
func (mr *MockServiceMockRecorder) CreatePin(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), params)
}

// DeletePin mocks base method.
func (m *MockService) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePin indicates an expected call of DeletePin.
func (mr *MockServiceMockRecorder) DeletePin(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), id)
}

// GetPin mocks base method.
func (m *MockService) Get(id int) (models.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(models.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPin indicates an expected call of GetPin.
func (mr *MockServiceMockRecorder) GetPin(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockService)(nil).Get), id)
}

// GetPins mocks base method.
func (m *MockService) List(page, limit int) ([]models.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", page, limit)
	ret0, _ := ret[0].([]models.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPins indicates an expected call of GetPins.
func (mr *MockServiceMockRecorder) GetPins(page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockService)(nil).List), page, limit)
}

// GetPinsByBoard mocks base method.
func (m *MockService) ListByBoard(boardId, page, limit int) ([]models.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByBoard", boardId, page, limit)
	ret0, _ := ret[0].([]models.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPinsByBoard indicates an expected call of GetPinsByBoard.
func (mr *MockServiceMockRecorder) GetPinsByBoard(boardId, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByBoard", reflect.TypeOf((*MockService)(nil).ListByBoard), boardId, page, limit)
}

// GetPinsByUser mocks base method.
func (m *MockService) ListByUser(userId, page, limit int) ([]models.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUser", userId, page, limit)
	ret0, _ := ret[0].([]models.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPinsByUser indicates an expected call of GetPinsByUser.
func (mr *MockServiceMockRecorder) GetPinsByUser(userId, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUser", reflect.TypeOf((*MockService)(nil).ListByUser), userId, page, limit)
}

// RemovePinFromBoard mocks base method.
func (m *MockService) RemoveFromBoard(boardId, pinId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromBoard", boardId, pinId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePinFromBoard indicates an expected call of RemovePinFromBoard.
func (mr *MockServiceMockRecorder) RemovePinFromBoard(boardId, pinId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromBoard", reflect.TypeOf((*MockService)(nil).RemoveFromBoard), boardId, pinId)
}

// UpdatePin mocks base method.
func (m *MockService) Update(params *models.Pin) (models.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", params)
	ret0, _ := ret[0].(models.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePin indicates an expected call of UpdatePin.
func (mr *MockServiceMockRecorder) UpdatePin(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockService)(nil).Update), params)
}
