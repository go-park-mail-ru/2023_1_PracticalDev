// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9806e1DecodeGithubComGoParkMailRu20231PracticalDevInternalModels(in *jlexer.Lexer, out *Notification) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "user_id":
			out.UserID = int(in.Int())
		case "is_read":
			out.IsRead = bool(in.Bool())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "type":
			out.Type = string(in.String())
		case "data":
			if m, ok := out.Data.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Data.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Data = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9806e1EncodeGithubComGoParkMailRu20231PracticalDevInternalModels(out *jwriter.Writer, in Notification) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"is_read\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsRead))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if m, ok := in.Data.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Data.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Data))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Notification) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9806e1EncodeGithubComGoParkMailRu20231PracticalDevInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Notification) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9806e1EncodeGithubComGoParkMailRu20231PracticalDevInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Notification) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9806e1DecodeGithubComGoParkMailRu20231PracticalDevInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Notification) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9806e1DecodeGithubComGoParkMailRu20231PracticalDevInternalModels(l, v)
}
func easyjson9806e1DecodeGithubComGoParkMailRu20231PracticalDevInternalModels1(in *jlexer.Lexer, out *NewPinNotification) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pin_id":
			out.PinID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9806e1EncodeGithubComGoParkMailRu20231PracticalDevInternalModels1(out *jwriter.Writer, in NewPinNotification) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pin_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PinID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewPinNotification) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9806e1EncodeGithubComGoParkMailRu20231PracticalDevInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewPinNotification) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9806e1EncodeGithubComGoParkMailRu20231PracticalDevInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewPinNotification) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9806e1DecodeGithubComGoParkMailRu20231PracticalDevInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewPinNotification) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9806e1DecodeGithubComGoParkMailRu20231PracticalDevInternalModels1(l, v)
}
func easyjson9806e1DecodeGithubComGoParkMailRu20231PracticalDevInternalModels2(in *jlexer.Lexer, out *NewLikeNotification) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pin_id":
			out.PinID = int(in.Int())
		case "author_id":
			out.AuthorID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9806e1EncodeGithubComGoParkMailRu20231PracticalDevInternalModels2(out *jwriter.Writer, in NewLikeNotification) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pin_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PinID))
	}
	{
		const prefix string = ",\"author_id\":"
		out.RawString(prefix)
		out.Int(int(in.AuthorID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewLikeNotification) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9806e1EncodeGithubComGoParkMailRu20231PracticalDevInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewLikeNotification) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9806e1EncodeGithubComGoParkMailRu20231PracticalDevInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewLikeNotification) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9806e1DecodeGithubComGoParkMailRu20231PracticalDevInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewLikeNotification) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9806e1DecodeGithubComGoParkMailRu20231PracticalDevInternalModels2(l, v)
}
func easyjson9806e1DecodeGithubComGoParkMailRu20231PracticalDevInternalModels3(in *jlexer.Lexer, out *NewFollowerNotification) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "follower_id":
			out.FollowerID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9806e1EncodeGithubComGoParkMailRu20231PracticalDevInternalModels3(out *jwriter.Writer, in NewFollowerNotification) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"follower_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.FollowerID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewFollowerNotification) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9806e1EncodeGithubComGoParkMailRu20231PracticalDevInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewFollowerNotification) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9806e1EncodeGithubComGoParkMailRu20231PracticalDevInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewFollowerNotification) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9806e1DecodeGithubComGoParkMailRu20231PracticalDevInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewFollowerNotification) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9806e1DecodeGithubComGoParkMailRu20231PracticalDevInternalModels3(l, v)
}
func easyjson9806e1DecodeGithubComGoParkMailRu20231PracticalDevInternalModels4(in *jlexer.Lexer, out *NewCommentNotification) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pin_id":
			out.PinID = int(in.Int())
		case "author_id":
			out.AuthorID = int(in.Int())
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9806e1EncodeGithubComGoParkMailRu20231PracticalDevInternalModels4(out *jwriter.Writer, in NewCommentNotification) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pin_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PinID))
	}
	{
		const prefix string = ",\"author_id\":"
		out.RawString(prefix)
		out.Int(int(in.AuthorID))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewCommentNotification) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9806e1EncodeGithubComGoParkMailRu20231PracticalDevInternalModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewCommentNotification) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9806e1EncodeGithubComGoParkMailRu20231PracticalDevInternalModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewCommentNotification) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9806e1DecodeGithubComGoParkMailRu20231PracticalDevInternalModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewCommentNotification) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9806e1DecodeGithubComGoParkMailRu20231PracticalDevInternalModels4(l, v)
}
