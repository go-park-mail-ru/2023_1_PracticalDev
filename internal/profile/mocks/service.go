// Code generated by MockGen. DO NOT EDIT.
// Source: internal/profile/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	profile "github.com/go-park-mail-ru/2023_1_PracticalDev/internal/profile"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// FullUpdate mocks base method.
func (m *MockService) FullUpdate(params *profile.FullUpdateParams) (profile.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FullUpdate", params)
	ret0, _ := ret[0].(profile.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FullUpdate indicates an expected call of FullUpdate.
func (mr *MockServiceMockRecorder) FullUpdate(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FullUpdate", reflect.TypeOf((*MockService)(nil).FullUpdate), params)
}

// GetProfileByUser mocks base method.
func (m *MockService) GetProfileByUser(userId int) (profile.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileByUser", userId)
	ret0, _ := ret[0].(profile.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileByUser indicates an expected call of GetProfileByUser.
func (mr *MockServiceMockRecorder) GetProfileByUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileByUser", reflect.TypeOf((*MockService)(nil).GetProfileByUser), userId)
}

// PartialUpdate mocks base method.
func (m *MockService) PartialUpdate(params *profile.PartialUpdateParams) (profile.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartialUpdate", params)
	ret0, _ := ret[0].(profile.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartialUpdate indicates an expected call of PartialUpdate.
func (mr *MockServiceMockRecorder) PartialUpdate(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartialUpdate", reflect.TypeOf((*MockService)(nil).PartialUpdate), params)
}
