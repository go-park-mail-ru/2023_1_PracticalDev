// Code generated by MockGen. DO NOT EDIT.
// Source: internal/chats/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	chats "github.com/go-park-mail-ru/2023_1_PracticalDev/internal/chats"
	models "github.com/go-park-mail-ru/2023_1_PracticalDev/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// ChatExists mocks base method.
func (m *MockRepository) ChatExists(user1ID, user2ID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatExists", user1ID, user2ID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatExists indicates an expected call of ChatExists.
func (mr *MockRepositoryMockRecorder) ChatExists(user1ID, user2ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatExists", reflect.TypeOf((*MockRepository)(nil).ChatExists), user1ID, user2ID)
}

// Create mocks base method.
func (m *MockRepository) Create(params *chats.CreateParams) (models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", params)
	ret0, _ := ret[0].(models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), params)
}

// CreateMessage mocks base method.
func (m *MockRepository) CreateMessage(params *chats.CreateMessageParams) (*models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", params)
	ret0, _ := ret[0].(*models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockRepositoryMockRecorder) CreateMessage(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockRepository)(nil).CreateMessage), params)
}

// Get mocks base method.
func (m *MockRepository) Get(id int) (models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), id)
}

// GetByUsers mocks base method.
func (m *MockRepository) GetByUsers(user1ID, user2ID int) (models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsers", user1ID, user2ID)
	ret0, _ := ret[0].(models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsers indicates an expected call of GetByUsers.
func (mr *MockRepositoryMockRecorder) GetByUsers(user1ID, user2ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsers", reflect.TypeOf((*MockRepository)(nil).GetByUsers), user1ID, user2ID)
}

// ListByUser mocks base method.
func (m *MockRepository) ListByUser(userId int) ([]models.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUser", userId)
	ret0, _ := ret[0].([]models.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUser indicates an expected call of ListByUser.
func (mr *MockRepositoryMockRecorder) ListByUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUser", reflect.TypeOf((*MockRepository)(nil).ListByUser), userId)
}

// MessagesList mocks base method.
func (m *MockRepository) MessagesList(chatID int) ([]models.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessagesList", chatID)
	ret0, _ := ret[0].([]models.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessagesList indicates an expected call of MessagesList.
func (mr *MockRepositoryMockRecorder) MessagesList(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagesList", reflect.TypeOf((*MockRepository)(nil).MessagesList), chatID)
}
