version: "3.9"

services:
  db:
    image: postgres
    container_name: db
    restart: always
    environment:
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    ports:
      - "5432:5432"
    networks:
      - db-network
    deploy:
      restart_policy:
        condition: on-failure

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    environment:
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
    command: redis-server --requirepass "${REDIS_PASSWORD}"
    ports:
      - "6379:6379"
    networks:
      - redis-network
    deploy:
      restart_policy:
        condition: on-failure

  backend:
    build: "."
    container_name: backend
    ports:
      - 8080:8080
    env_file:
      - .env
    depends_on:
      - db
      - redis
      - images
      - auth
      - search
    networks:
      - nginx-network
      - db-network
      - redis-network
      - api-network
    deploy:
      restart_policy:
        condition: on-failure

  images:
    build:
      context: .
      dockerfile: ./cmd/images/Dockerfile
    container_name: images
    ports:
      - 8088:8088
    env_file:
      - .env
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - api-network
    
  auth:
    build:
      context: .
      dockerfile: ./cmd/auth/Dockerfile
    container_name: auth
    ports:
      - 8087:8087
    env_file:
      - .env
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - api-network
      - db-network
      - redis-network

  search:
    build:
      context: .
      dockerfile: ./cmd/search/Dockerfile
    container_name: search
    ports:
      - 8089:8089
    env_file:
      - .env
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - api-network
      - db-network

  docs:
    image: nginx
    container_name: docs
    volumes:
      - ./docs/index.html:/usr/share/nginx/html/index.html:ro
      - ./docs/openapi.yml:/usr/share/nginx/html/openapi.yml:ro
    ports:
      - 8081:80
    networks:
      - nginx-network
    deploy:
      restart_policy:
        condition: on-failure
  
  frontend:
    build: 
      context: https://github.com/frontend-park-mail-ru/2023_1_PracticalDev.git#main
      dockerfile: Dockerfile.prod
    container_name: frontend
    command: npm run server
    ports:
      - 8000:8000
    networks:
      - nginx-network
    deploy:
      restart_policy:
        condition: on-failure

  nginx:
    image: nginx
    container_name: nginx
    volumes:
      - ./configs/pickpin.conf:/etc/nginx/conf.d/default.conf
    ports:
      - 80:80
    depends_on:
      - backend
      - frontend
      - docs
    networks:
      - nginx-network
    deploy:
      restart_policy:
        condition: on-failure
  
  node_exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      # - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - api-network

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    networks:
      - api-network
    environment:
      TZ: "Europe/Moscow"
    command: "--config.file=/etc/prometheus/prometheus.yml"
    volumes:
      - ./configs/:/etc/prometheus/
    depends_on:
    - backend
    - auth
    - images
    ports:
      - "9090:9090"

  grafana:
    container_name: "grafana"
    image: grafana/grafana:9.5.1
    networks:
        - api-network
    volumes:
      - ./configs/grafana/data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning
    environment:
      TZ: "Europe/Moscow"
      GF_SECURITY_ADMIN_USER: 'admin'
      GF_SECURITY_ADMIN_PASSWORD: 'password'
      GF_INSTALL_PLUGINS: 'grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel'
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

networks:
  nginx-network:
    driver: bridge
    name: nginx_network
  db-network:
    driver: bridge
    name: db_network
  redis-network:
    driver: bridge
    name: redis_network
  api-network:
    driver: bridge
    name: api_network
