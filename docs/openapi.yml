openapi: 3.0.0

info:
  title: PickPin API
  version: 0.1.9
  contact:
    name: Grechko Georgy
    url: t.me/geogreck


servers:
  - url: http://localhost/api/v1
    description: Main server
  - url: http://localhost/api/v0
    description: Internal test server, powered by Express.js

tags:
  - name: Users
  - name: Posts
  - name: Auth

paths:
  /users/{user_id}:
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      summary: Returns user with specified id
      responses:
        "200": # status code
          description: A JSON of user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      tags:
        - Users
      security:
        - cookieAuth: [ ]

  /posts:
    parameters:
      - schema:
          type: integer
        name: page
        in: query
        required: false
      - schema:
          type: integer
        name: limit
        in: query
        required: false
    get:
      summary: Returns a segment of posts according to the page and the number of pins in one page (limit parameter)
      responses:
        "200": # status code
          description: A JSON array of pins
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pin"
        "400":
          description: Bad request.
          $ref: "#/components/responses/ErrResponseBadRequest"
        "401":
          description: Not authorized.
          $ref: "#/components/responses/ErrUnauthorized"
      tags:
        - Posts
      security:
        - cookieAuth: [ ]

  /boards:
    get:
      tags:
        - Boards
      summary: Returns all boards that the user has access to
      description: Returns all boards that the user has access to
      responses:
        "200":
          description: A JSON array of boards
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Boards"
        "400":
          $ref: "#/components/responses/ErrResponseBadRequest"
        "401":
          $ref: "#/components/responses/ErrUnauthorized"
      security:
        - cookieAuth: [ ]
    post:
      tags:
        - Boards
      summary: Create a new board
      description: Create a new board
      requestBody:
        description: A JSON object containing the data to create board.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBoard"
      responses:
        "200":
          description: A JSON object of created board.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Board"
        "400":
          $ref: "#/components/responses/ErrResponseBadRequest"
        "401":
          $ref: "#/components/responses/ErrUnauthorized"
      security:
        - cookieAuth: [ ]

  /boards/{board_id}:
    get:
      tags:
        - Boards
      summary: Returns board with board_id
      description: Returns board with board_id
      responses:
        "200":
          description: A JSON object of board.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Board"
        "400":
          $ref: "#/components/responses/ErrResponseBadRequest"
        "401":
          $ref: "#/components/responses/ErrUnauthorized"
      security:
        - cookieAuth: [ ]
    put:
      tags:
        - Boards
      summary: Full update of board
      description: Full update of board
      requestBody:
        description: A JSON object containing the data to update board.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FullUpdateBoard"
      responses:
        "200":
          description: A JSON object of updated board.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Board"
        "400":
          $ref: "#/components/responses/ErrResponseBadRequest"
        "401":
          $ref: "#/components/responses/ErrUnauthorized"
      security:
        - cookieAuth: [ ]
    patch:
      tags:
        - Boards
      summary: Partial update of board
      description: Partial update of board
      requestBody:
        description: A JSON object containing the data to update board.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PartialUpdateBoard"
      responses:
        "200":
          description: A JSON object of updated board.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Board"
        "400":
          $ref: "#/components/responses/ErrResponseBadRequest"
        "401":
          $ref: "#/components/responses/ErrUnauthorized"
      security:
        - cookieAuth: [ ]
    delete:
      tags:
        - Boards
      summary: Delete board
      description: Delete board
      responses:
        "204":
          description: Board deleted successfully.
        "400":
          $ref: "#/components/responses/ErrResponseBadRequest"
        "401":
          $ref: "#/components/responses/ErrUnauthorized"
      security:
        - cookieAuth: [ ]

  /auth/signup:
    post:
      summary: Creates new user and returnes authentication cookie.
      security: [ ]
      tags:
        - Auth
      requestBody:
        required: true
        description: A JSON object containing the login and password.
        content:
          application/json:
            schema:
              allOf:
                - properties:
                    email:
                      $ref: "#/components/schemas/Email"
                - properties:
                    password:
                      $ref: "#/components/schemas/Password"
      responses:
        "204":
          description: >
            Successfully created user.
            Log in to get SESSION cookie. 
        "400":
          description: Bad request.
          $ref: "#/components/responses/ErrResponseBadRequest"

  /auth/login:
    post:
      summary: Logs in and returns the authentication cookie
      requestBody:
        required: true
        description: A JSON object containing the login and password.
        content:
          application/json:
            schema:
              allOf:
                - properties:
                    email:
                      $ref: "#/components/schemas/Email"
                - properties:
                    password:
                      $ref: "#/components/schemas/Password"

      security: [ ]
      tags:
        - Auth
      responses:
        "200":
          description: >
            Successfully authenticated.
            The session ID is returned in a cookie named `JSESSIONID`. 
            You need to include this cookie in subsequent requests.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: JSESSIONID=abcde12345; Path=/; HttpOnly
        "400":
          description: Bad request.
          $ref: "#/components/responses/ErrResponseBadRequest"
        "401":
          description: Not authorized.
          $ref: "#/components/responses/ErrUnauthorized"
        "404":
          description: User not found
          $ref: "#/components/responses/ErrResponseNoSuchUser"
  /auth/logout:
    delete:
      summary: Logs out and deletes the authentication cookie.
      security:
        - cookieAuth: [ ]
      tags:
        - Auth
      responses:
        "204":
          description: Successfully logged out.
        "400":
          description: Bad request.
          $ref: "#/components/responses/ErrResponseBadRequest"
        "401":
          description: Not authorized.
          $ref: "#/components/responses/ErrUnauthorized"
        "404":
          description: Cookie not found
          $ref: "#/components/responses/ErrResponseNoSuchCookie"
  /auth:
    post:
      summary: Updates existing authentication cookie.
      security:
        - cookieAuth: [ ]
      tags:
        - Auth
      responses:
        "200":
          description: >
            Successfully updated cookie.
            You need to include this cookie **now** in subsequent requests.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: JSESSIONID=abcde12345; Path=/; HttpOnly
        "400":
          description: Bad request.
          $ref: "#/components/responses/ErrResponseBadRequest"
        "401":
          description: Not authorized.
          $ref: "#/components/responses/ErrUnauthorized"
        "404":
          description: Cookie not found
          $ref: "#/components/responses/ErrResponseNoSuchCookie"

components:
  schemas:
    Email:
      type: string
      format: email
      pattern: '/(?:[a-z0-9!#$%&*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])/'
      example: vk@mail.ru
    Password:
      type: string
      format: password
      minLength: 8
      maxLength: 100
    Username:
      type: string
      minLength: 4
      maxLength: 40
      example: geogreck
    Link:
      type: string
      minLength: 4
      maxLength: 100
      example: http://pickpin.ru
    MediaSource:
      type: string
      example: picture.jpg
    Privacy:
      type: string
      enum:
        - secret
        - public
      example: secret
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          $ref: "#/components/schemas/Email"
        username:
          $ref: "#/components/schemas/Username"
    Board:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        privacy:
          $ref: "#/components/schemas/Privacy"
        user_id:
          type: integer
      example: {
        "id": 3,
        "name": "Notes",
        "description": "Board for notes",
        "privacy": "secret",
        "user_id": 4
      }
    CreateBoard:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        privacy:
          $ref: "#/components/schemas/Privacy"
      example: {
        "name": "Notes",
        "description": "Board for notes",
        "privacy": "secret",
      }
    FullUpdateBoard:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        privacy:
          $ref: "#/components/schemas/Privacy"
      example: {
        "name": "Notes",
        "description": "Board for notes",
        "privacy": "secret",
      }
    PartialUpdateBoard:
      type: object
      properties:
        name:
          type: string
          required: false
        description:
          type: string
          required: false
        privacy:
          type: string
          enum:
            - secret
            - public
          example: secret
          required: false
      example: {
        "name": "Notes"
      }
    Boards:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Board"
    Pin:
      type: object
      properties:
        id:
          type: integer
        link:
          $ref: "#/components/schemas/Link"
        title:
          type: string
        description:
          type: string
        media_source:
          $ref: "#/components/schemas/MediaSource"
        board_id:
          type: integer
    Error:
      type: object
      properties:
        title:
          type: string
          description: Error title
        status:
          type: integer
          description: HTTP status code
        detail:
          type: string
          description: Verbose error details
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: SESSIONID
  responses:
    ErrResponseBadRequest:
      description: Bad request
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
    ErrResponseNoSuchUser:
      description: User not found
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
    ErrResponseNoSuchCookie:
      description: Cookie not found
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
    ErrUnauthorized:
      description: Not authorized
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
