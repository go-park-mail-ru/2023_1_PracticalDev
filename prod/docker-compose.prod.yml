version: "3.9"

services:
  db:
    image: postgres
    container_name: db
    restart: always
    command:
      - "-c"
      - 'config_file=/etc/postgresql/postgresql.conf'
    environment:
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    volumes:
      - ./configs/postgresql.conf:/etc/postgresql/postgresql.conf
    networks:
      - db-network
    deploy:
      restart_policy:
        condition: on-failure

  mongo:
    image: mongo
    container_name: mongo
    environment:
        MONGO_INITDB_ROOT_USERNAME: "${MONGO_ROOT_USER}"
        MONGO_INITDB_ROOT_PASSWORD: "${MONGO_ROOT_PASSWORD}"
        MONGO_INITDB_DATABASE: "url_shortener"
    networks:
      - db-network
    deploy:
      restart_policy:
        condition: on-failure

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    environment:
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
    command: redis-server --requirepass "${REDIS_PASSWORD}"
    networks:
      - redis-network
    deploy:
      restart_policy:
        condition: on-failure

  backend:
    build: "."
    container_name: backend
    env_file:
      - .env
    depends_on:
      - db
      - redis
      - images
      - auth
      - search
      - shortener
    networks:
      - nginx-network
      - db-network
      - redis-network
      - api-network
    environment:
        SHORT_HOST: "short.pickpin.ru"
    deploy:
      restart_policy:
        condition: on-failure

  images:
    build:
      context: .
      dockerfile: ./cmd/images/Dockerfile
    container_name: images
    volumes:
      - ./.aws/credentials:/root/.aws/credentials
    env_file:
      - .env
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - api-network

  auth:
    build:
      context: .
      dockerfile: ./cmd/auth/Dockerfile
    container_name: auth
    env_file:
      - .env
    depends_on:
      - db
      - redis
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - api-network
      - db-network
      - redis-network

  search:
    build:
      context: .
      dockerfile: ./cmd/search/Dockerfile
    container_name: search
    env_file:
      - .env
    depends_on:
      - db
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - api-network
      - db-network
  
  shortener:
    build:
      context: .
      dockerfile: ./cmd/shortener/Dockerfile
    container_name: shortener
    depends_on:
      - db
      - mongo
    env_file:
      - .env
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - api-network
      - db-network
      - nginx-network

  docs:
    image: nginx
    container_name: docs
    volumes:
      - ./docs/index.html:/usr/share/nginx/html/index.html:ro
      - ./docs/openapi.yml:/usr/share/nginx/html/openapi.yml:ro
    ports:
      - ${DOCS_PORT}:80
    networks:
      - nginx-network
    deploy:
      restart_policy:
        condition: on-failure
  
  node_exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      # - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - api-network

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    networks:
      - api-network
    environment:
      TZ: "Europe/Moscow"
    command: "--config.file=/etc/prometheus/prometheus.yml"
    volumes:
      - ./configs/:/etc/prometheus/
    depends_on:
      - backend
      - auth
      - images

  grafana:
    container_name: "grafana"
    image: grafana/grafana:9.5.1
    networks:
      - api-network
      - grafana-network
    volumes:
      - ./configs/grafana/data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning
    environment:
      TZ: "Europe/Moscow"
      GF_SECURITY_ADMIN_USER: 'admin'
      GF_SECURITY_ADMIN_PASSWORD: 'password'
      GF_INSTALL_PLUGINS: 'grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel'
    ports:
      - "3000:3000"

networks:
  nginx-network:
    driver: bridge
    name: nginx_network
  grafana-network:
    driver: bridge
    name: grafana_network
  db-network:
    driver: bridge
    name: db_network
  redis-network:
    driver: bridge
    name: redis_network
  api-network:
    driver: bridge
    name: api_network
